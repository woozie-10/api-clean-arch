// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/assessments": {
            "post": {
                "description": "Adds a new assessment for a student.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Assessments"
                ],
                "summary": "Add an assessment",
                "parameters": [
                    {
                        "description": "Assessment details",
                        "name": "assessment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Assessment"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created assessment",
                        "schema": {
                            "$ref": "#/definitions/domain.Assessment"
                        }
                    },
                    "422": {
                        "description": "Unprocessable entity",
                        "schema": {
                            "$ref": "#/definitions/rest.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/rest.ResponseError"
                        }
                    }
                }
            }
        },
        "/assessments/{username}": {
            "get": {
                "description": "Retrieves an assessment for a student by username.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Assessments"
                ],
                "summary": "Retrieve an assessment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username of the student",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieved assessment",
                        "schema": {
                            "$ref": "#/definitions/domain.Assessment"
                        }
                    },
                    "404": {
                        "description": "Assessment not found",
                        "schema": {
                            "$ref": "#/definitions/rest.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/rest.ResponseError"
                        }
                    }
                }
            }
        },
        "/students": {
            "get": {
                "description": "Returns a list of all students from the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "students"
                ],
                "summary": "Retrieve a list of students",
                "responses": {
                    "200": {
                        "description": "List of students",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Student"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/rest.ResponseError"
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new student to the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "students"
                ],
                "summary": "Add a new student",
                "parameters": [
                    {
                        "description": "Student object to add",
                        "name": "student",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Student"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Added student",
                        "schema": {
                            "$ref": "#/definitions/domain.Student"
                        }
                    },
                    "422": {
                        "description": "Unprocessable entity",
                        "schema": {
                            "$ref": "#/definitions/rest.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/rest.ResponseError"
                        }
                    }
                }
            }
        },
        "/students/course/{course}": {
            "get": {
                "description": "Retrieve a list of students by their course from the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "students"
                ],
                "summary": "Get students by course",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Course of the students to retrieve",
                        "name": "course",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of students",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Student"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/rest.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/rest.ResponseError"
                        }
                    }
                }
            }
        },
        "/students/group/{group}": {
            "get": {
                "description": "Retrieve a list of students by their group from the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "students"
                ],
                "summary": "Get students by group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Group of the students to retrieve",
                        "name": "group",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of students",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Student"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/rest.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/rest.ResponseError"
                        }
                    }
                }
            }
        },
        "/students/{username}": {
            "get": {
                "description": "Retrieve a student by their username from the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "students"
                ],
                "summary": "Get student by username",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username of the student to retrieve",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Student details",
                        "schema": {
                            "$ref": "#/definitions/domain.Student"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/rest.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/rest.ResponseError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing student in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "students"
                ],
                "summary": "Update a student",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username of the student to update",
                        "name": "username",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New student data",
                        "name": "newStudent",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Student"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated student",
                        "schema": {
                            "$ref": "#/definitions/domain.Student"
                        }
                    },
                    "422": {
                        "description": "Unprocessable entity",
                        "schema": {
                            "$ref": "#/definitions/rest.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/rest.ResponseError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an existing student from the database",
                "tags": [
                    "students"
                ],
                "summary": "Delete a student",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username of the student to delete",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message indicating successful deletion",
                        "schema": {
                            "$ref": "#/definitions/rest.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/rest.ResponseError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.Assessment": {
            "type": "object",
            "properties": {
                "marks": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "domain.Student": {
            "type": "object",
            "properties": {
                "course": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "group": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "specialty": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "rest.Response": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "rest.ResponseError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:9090",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Students REST API",
	Description:      "This is a  API for managing students.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
